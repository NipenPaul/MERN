** Create database or use database
> use databaseName

** Show all database
> show dbs

** Create Collection Method 1
> db.createCollection("collectionName")

** Create Collection Method 2
> db.collectionName.insertOne(object)

** Inset data of Collection Method 1, posts table name
> db.posts.insertOne({
  title: "Post Title 1",
  body: "Body of post.",
  category: "News",
  likes: 1,
  tags: ["news", "events"],
  date: Date()
})


** Inset data of Collection Method 2, posts table name

db.posts.insertMany([  
  {
    title: "Post Title 2",
    body: "Body of post.",
    category: "Event",
    likes: 2,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 3",
    body: "Body of post.",
    category: "Technology",
    likes: 3,
    tags: ["news", "events"],
    date: Date()
  },
  {
    title: "Post Title 4",
    body: "Body of post.",
    category: "Event",
    likes: 4,
    tags: ["news", "events"],
    date: Date()
  }
])

** all document show in Collection
> db.collectionName.find()

** Only one top document show
> db.collectionName.findOne() 

** specific document show in category based search Collection
> db.posts.find( {category: "News"} )

** all document show only title and date visiable
> db.posts.find({}, {title: 1, date: 1})

** _id not show and title, date show
> db.posts.find({}, {_id: 0, title: 1, date: 1})

** update baseed on title and update likes value
> db.posts.updateOne( { title: "Post Title 1" }, { $set: { likes: 2 } } )

** Update the document, but if not found insert it: using upsert: true
>db.posts.updateOne( 
  { title: "Post Title 5" }, 
  {
    $set: 
      {
        title: "Post Title 5",
        body: "Body of post.",
        category: "Event",
        likes: 5,
        tags: ["news", "events"],
        date: Date()
      }
  }, 
  { upsert: true }
)

** update many function
> db.posts.updateMany({}, { $inc: { likes: 1 } })

** delete one based on title
> db.posts.deleteOne({ title: "Post Title 5" })

** delete document using many function
> db.posts.deleteMany({ category: "Technology" })


** Comparison
$eq: Values are equal
$ne: Values are not equal
$gt: Value is greater than another value
$gte: Value is greater than or equal to another value
$lt: Value is less than another value
$lte: Value is less than or equal to another value
$in: Value is matched within an array

** Logical
$and: Returns documents where both queries match
$or: Returns documents where either query matches
$nor: Returns documents where both queries fail to match
$not: Returns documents where the query does not match

